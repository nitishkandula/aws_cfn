{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"This Template will create 3-Tier App Stack with nodes auto-bootstraping to Chef-Server",
   "Parameters":{
      "TagValue1":{
         "Description":"The Project Name",
         "Type":"String"
      },
      "TagValue2":{
         "Description":"The Name of Environment",
         "Type":"String",
         "AllowedValues":[
            "Development",
            "Staging",
            "Production"
         ]
      },
      "CIDR":{
         "Description":"The IP address range that you'll use for your VPC",
         "Default" : "10.0.0.0/16",
         "Type":"String"
      },
      "PublicCidrBlock1": {
         "Description":"The IP address range for Public Subnet 1",
         "Default" : "10.0.0.0/24",
         "Type":"String"
      },
      "PublicSubnet1AZ":{
         "Description":"The AZ for Public Subnet 1",
         "Type":"AWS::EC2::AvailabilityZone::Name"
      },
      "PublicCidrBlock2":{
         "Description":"The IP address range for Public Subnet 2",
         "Default" : "10.0.1.0/24",
         "Type":"String"
      },
      "PublicSubnet2AZ":{
         "Description":"The AZ for Public Subnet 2",
         "Type":"AWS::EC2::AvailabilityZone::Name"
      },
      "PrivateCidrBlock1":{
         "Description":"The IP address range for Private Subnet 1",
         "Default" : "10.0.2.0/24",
         "Type":"String"
      },
      "PrivateSubnet1AZ":{
         "Description":"The AZ for Private Subnet 1",
         "Type":"AWS::EC2::AvailabilityZone::Name"
      },
      "PrivateCidrBlock2":{
         "Description":"The IP address range for Private Subnet 2",
         "Default" : "10.0.3.0/24",
         "Type":"String"
      },
      "PrivateSubnet2AZ":{
         "Description":"The AZ Private Subnet 2",
         "Type":"AWS::EC2::AvailabilityZone::Name"
      },
      "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "nitish_aws",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "Must be a valid EC2 instance type"
    }
   },
   "Resources":{
      "VPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":{
               "Ref":"CIDR"
            },
            "EnableDnsSupport":"true",
            "EnableDnsHostnames":"true",
            "InstanceTenancy":"default",
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               }
            ]
         }
      },
      "PublicSubnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PublicCidrBlock1"
            },
            "MapPublicIpOnLaunch":"true",
            "AvailabilityZone":{
               "Ref":"PublicSubnet1AZ"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               }
            ]
         }
      },
      "PublicSubnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PublicCidrBlock2"
            },
            "MapPublicIpOnLaunch":"true",
            "AvailabilityZone":{
               "Ref":"PublicSubnet2AZ"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               }
            ]
         }
      },
      "InternetGateway":{
         "Type":"AWS::EC2::InternetGateway",
         "Properties":{
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               }
            ]
         }
      },
      "AttachGateway":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "InternetGatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "NAT":{
         "DependsOn":"AttachGateway",
         "Type":"AWS::EC2::NatGateway",
         "Properties":{
            "AllocationId":{
               "Fn::GetAtt":[
                  "EIP",
                  "AllocationId"
               ]
            },
            "SubnetId":{
               "Ref":"PublicSubnet1"
            }
         }
      },
      "EIP":{
         "Type":"AWS::EC2::EIP",
         "Properties":{
            "Domain":"vpc"
         }
      },
      "PublicRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               }
            ]
         }
      },
      "PublicRoute":{
         "Type":"AWS::EC2::Route",
         "DependsOn":"AttachGateway",
         "Properties":{
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "PublicSubnetRouteTableAssociation1":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet1"
            },
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            }
         }
      },
      "PublicSubnetRouteTableAssociation2":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet2"
            },
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            }
         }
      },
      "PublicNetworkAcl":{
         "Type":"AWS::EC2::NetworkAcl",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               }
            ]
         }
      },
      "PublicSubnetNetworkAclAssociation1":{
         "Type":"AWS::EC2::SubnetNetworkAclAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet1"
            },
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            }
         }
      },
      "PublicSubnetNetworkAclAssociation2":{
         "Type":"AWS::EC2::SubnetNetworkAclAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet2"
            },
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            }
         }
      },
      "PrivateSubnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PrivateCidrBlock1"
            },
            "AvailabilityZone":{
               "Ref":"PrivateSubnet1AZ"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               }
            ]
         }
      },
      "PrivateSubnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PrivateCidrBlock2"
            },
            "AvailabilityZone":{
               "Ref":"PrivateSubnet2AZ"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               }
            ]
         }
      },
      "PrivateRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Private"
               }
            ]
         }
      },
      "PrivateSubnetRouteTableAssociation1":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PrivateSubnet1"
            },
            "RouteTableId":{
               "Ref":"PrivateRouteTable"
            }
         }
      },
      "PrivateSubnetRouteTableAssociation2":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PrivateSubnet2"
            },
            "RouteTableId":{
               "Ref":"PrivateRouteTable"
            }
         }
      },
      "PrivateNATRouteTableAssociation":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"PrivateRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "NatGatewayId":{
               "Ref":"NAT"
            }
         }
      },
      "PrivateNetworkAcl":{
         "Type":"AWS::EC2::NetworkAcl",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Project",
                  "Value":{
                     "Ref":"TagValue1"
                  }
               },
               {
                  "Key":"Environment",
                  "Value":{
                     "Ref":"TagValue2"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Private"
               }
            ]
         }
      },
      "PrivateSubnetNetworkAclAssociation1":{
         "Type":"AWS::EC2::SubnetNetworkAclAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PrivateSubnet1"
            },
            "NetworkAclId":{
               "Ref":"PrivateNetworkAcl"
            }
         }
      },
      "PrivateSubnetNetworkAclAssociation2":{
         "Type":"AWS::EC2::SubnetNetworkAclAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PrivateSubnet2"
            },
            "NetworkAclId":{
               "Ref":"PrivateNetworkAcl"
            }
         }
      },
      "NetworkAclEntry1":{
         "Type":"AWS::EC2::NetworkAclEntry",
         "Properties":{
            "CidrBlock":"0.0.0.0/0",
            "Egress":"true",
            "Protocol":"-1",
            "RuleAction":"allow",
            "RuleNumber":"100",
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            }
         }
      },
      "NetworkAclEntry2":{
         "Type":"AWS::EC2::NetworkAclEntry",
         "Properties":{
            "CidrBlock":"0.0.0.0/0",
            "Protocol":"-1",
            "RuleAction":"allow",
            "RuleNumber":"100",
            "NetworkAclId":{
               "Ref":"PublicNetworkAcl"
            }
         }
      },
      "NetworkAclEntry3":{
         "Type":"AWS::EC2::NetworkAclEntry",
         "Properties":{
            "CidrBlock":"0.0.0.0/0",
            "Egress":"true",
            "Protocol":"-1",
            "RuleAction":"allow",
            "RuleNumber":"100",
            "NetworkAclId":{
               "Ref":"PrivateNetworkAcl"
            }
         }
      },
      "NetworkAclEntry4":{
         "Type":"AWS::EC2::NetworkAclEntry",
         "Properties":{
            "CidrBlock":"0.0.0.0/0",
            "Protocol":"-1",
            "RuleAction":"allow",
            "RuleNumber":"100",
            "NetworkAclId":{
               "Ref":"PrivateNetworkAcl"
            }
         }
      },
      "WebServerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "WebServer Security group for int demo",
          "VpcId": {"Ref": "VPC"},
          "SecurityGroupIngress": [{
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          }, {
            "FromPort": 80,
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "ToPort": 80
          },{
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "ToPort": 8080
          }]
        }
      },
      "AppServerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "AppServer Security group for int demo",
          "VpcId": {"Ref": "VPC"},
          "SecurityGroupIngress": [{
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22,
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}
          }, {
            "FromPort": 80,
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"},
            "ToPort": 80
          },{
            "FromPort": 8,
            "IpProtocol": "icmp",
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"},
            "ToPort": -1
            },{
              "FromPort": 8080,
              "IpProtocol": "tcp",
              "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"},
              "ToPort": 8080
              },{
                "FromPort": 443,
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"},
                "ToPort": 443
                }]
        }
      },
      "DBServerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "DB Security group for int demo",
          "VpcId": {"Ref": "VPC"},
          "SecurityGroupIngress": [{
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22,
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}
          },{
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22,
            "SourceSecurityGroupId": {"Ref": "AppServerSecurityGroup"}
          }, {
            "FromPort": 80,
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"},
            "ToPort": 80
          },{
            "FromPort": 8,
            "IpProtocol": "icmp",
            "SourceSecurityGroupId": {"Ref": "AppServerSecurityGroup"},
            "ToPort": -1
            },{
              "FromPort": 8,
              "IpProtocol": "icmp",
              "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"},
              "ToPort": -1
              },{
                "FromPort": 3306,
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {"Ref": "AppServerSecurityGroup"},
                "ToPort": 3306
                }]
        }
      },
      "DBServerInstance": {
        "Type": "AWS::EC2::Instance",
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "config": {
              "packages": {
                "yum": {
                  "java-1.8.0-openjdk": []
                }
              },
              "services": {
                "sysvinit": {
                  "java-1.8.0-openjdk": {
                    "enabled": "true",
                    "ensureRunning": "true"
                  }
                }
              }
            }
          }
        },
        "Properties": {
         "EbsOptimized": false,
         "ImageId": "ami-b46ed0d4",
         "InstanceType"   : { "Ref" : "InstanceType" },
         "SubnetId" : { "Ref" : "PrivateSubnet1" },
         "SecurityGroupIds" : [{ "Ref" : "DBServerSecurityGroup" }],
         "IamInstanceProfile": "opswork1",
         "KeyName"        : { "Ref" : "KeyName" },
         "UserData": {"Fn::Base64": {"Fn::Join": ["", [
            "#!/bin/bash\n",
            "# Get the latest CloudFormation package. Since the epel-releae not work in centos-7, pleaes follow the below steps\n",
            "#sudo cd /opt","\n",
"#sudo curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz","\n",
"#sudo tar -xvpf aws-cfn-bootstrap-latest.tar.gz","\n",
"#sudo cd aws-cfn-bootstrap-1.4/","\n",
"#sudo python setup.py build","\n",
"#sudo python setup.py install","\n",
"#sudo ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup","\n",
"#sudo chmod 775 /usr/init/redhat/cfn-hup","\n",
"#sudo cd /opt","\n",
"#sudo mkdir aws","\n",
"#sudo cd aws","\n",
"#sudo mkdir bin","\n",
"#sudo ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup","\n",
"#sudo ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init","\n",
"#sudo ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal","\n",
"#sudo ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader","\n",
"#sudo ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata","\n",
"#sudo ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event","\n",
"#sudo ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result","\n",

            "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource LaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
            "sudo yum -y install openssl \n",
            "sudo yum -y install wget \n",
            "sudo cd /tmp \n",
            "sudo wget https://s3-us-west-2.amazonaws.com/opswork-nitish/mysql_auto_chef_bootstrap.sh \n",
            "sudo sh mysql_auto_chef_bootstrap.sh \n",
            "sudo mysql -h 127.0.0.1 -uroot -proot_password -Dmy_company -e \"CREATE USER 'db_user2'@'%' IDENTIFIED BY 'user_password';\"", "\n",
            "sudo mysql -h 127.0.0.1 -uroot -proot_password -Dmy_company -e \"GRANT ALL PRIVILEGES ON *.* TO 'db_user2'@'%' WITH GRANT OPTION;\"", "\n",
            "# All done so signal success\n",
            "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
            ]]}}
       }
     },
         "LoadBalancer": {
           "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
           "Properties": {
             "Subnets": [{"Ref": "PrivateSubnet1"}, {"Ref": "PrivateSubnet2"}],
             "LoadBalancerName": "applicationInternalELB",
             "Listeners": [{
               "InstancePort": "8080",
               "InstanceProtocol": "HTTP",
               "LoadBalancerPort": "80",
               "Protocol": "HTTP"
             }],
             "HealthCheck": {
               "HealthyThreshold": "2",
               "Interval": "5",
               "Target": "TCP:8080",
               "Timeout": "3",
               "UnhealthyThreshold": "2"
             },
             "SecurityGroups": [{"Ref": "WebServerSecurityGroup"}],
             "Scheme": "internal"
           },
           "DependsOn": "AttachGateway"
         },

      "LaunchConfiguration": {
  			"Type": "AWS::AutoScaling::LaunchConfiguration",
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "config": {
              "packages": {
                "yum": {
                  "java-1.8.0-openjdk": []
                }
              },
              "services": {
                "sysvinit": {
                  "java-1.8.0-openjdk": {
                    "enabled": "true",
                    "ensureRunning": "true"
                  }
                }
              }
            }
          }
        },
        "Properties": {
  				"EbsOptimized": false,
  				"ImageId": "ami-6f68cf0f",
  				"InstanceType": { "Ref" : "InstanceType" },
  				"SecurityGroups": [ {"Ref" : "AppServerSecurityGroup"} ],
          "IamInstanceProfile": "opswork1",
  				"KeyName": {"Ref": "KeyName"},
  				"AssociatePublicIpAddress": false,
  				"UserData": {"Fn::Base64": {"Fn::Join": ["", [
            "#!/bin/bash\n",
            "# Get the latest CloudFormation package. Since the epel-releae not work in linux, pleaes follow the below steps\n",
            "sudo su - \n",
            "sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
            "sudo yum -y install python-pip\n",
            "sudo pip install --upgrade pip\n",
"sudo cd /usr/bin\n",
"sudo pip install pystache\n",
"sudo pip install argparse\n",
"sudo pip install python-daemon\n",
"sudo pip install requests\n",
"cd /opt", "\n",
"sudo curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
"sudo tar -xvpf aws-cfn-bootstrap-latest.tar.gz\n",
"cd aws-cfn-bootstrap-1.4/", "\n",
"sudo python setup.py build","\n",
"sudo python setup.py install","\n",
"sudo ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup","\n",
"sudo chmod 775 /usr/init/redhat/cfn-hup","\n",
"cd /opt","\n",
"sudo mkdir aws","\n",
"cd aws","\n",
"sudo mkdir bin\n",
"sudo ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup","\n",
"sudo ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init","\n",
"sudo ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal","\n",
"sudo ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader","\n",
"sudo ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata","\n",
"sudo ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event","\n",
"sudo ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result","\n",

            "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource LaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
            "sudo yum -y install unzip \n",
            "sudo yum -y install wget \n",
            "sudo cd /tmp \n",
            "sudo sleep 4m \n",
            "sudo wget https://s3-us-west-2.amazonaws.com/opswork-nitish/auto_chef_bootstrap.sh \n",
            "sudo sh auto_chef_bootstrap.sh \n",
            "# All done so signal success\n",
            "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
            ]]}}
  			}
  		},
      "AutoScalingGroup": {
  			"Type": "AWS::AutoScaling::AutoScalingGroup",
  			"Properties": {
  				"LoadBalancerNames": [{"Ref": "LoadBalancer"}],
  				"LaunchConfigurationName": {"Ref": "LaunchConfiguration"},
  				"MinSize": "2",
  				"MaxSize": "2",
  				"DesiredCapacity": "2",
  				"VPCZoneIdentifier": [{"Ref": "PrivateSubnet1"}, {"Ref": "PrivateSubnet2"}]
  			},
  			"CreationPolicy": {
  				"ResourceSignal": {
  					"Timeout": "PT11M"
  				}
  			},
  			"DependsOn": "AttachGateway"
  		},
      "WebServerInstance": {
        "Type": "AWS::EC2::Instance",
        "Metadata" : {
          "Comment1" : "Configure the bootstrap helpers to install the nginx",
          "Comment2" : "Configures the nginx to point to internal LoadBalancer",

          "AWS::CloudFormation::Init" : {
            "configSets" : {
              "Install" : [ "Install" ]
            },

            "Install" : {
              "packages" : {
                "yum" : {
                  "nginx": []
                }
              },
              "files" : {
                "/etc/nginx/nginx.conf" : {
                  "content" : { "Fn::Join" : [ "", [
                    "worker_processes  1;\n",
                    "\n",
                    "events {\n",
                      "worker_connections  1024;\n",
                      "}\n",
                      "\n",
                      "http {\n",
                        "include       mime.types;\n",
                        "default_type  application/octet-stream;\n",
                        "\n",
                        "sendfile        on;\n",
                        "keepalive_timeout  65;\n",
                        "\n",
                        "gzip  on;\n",
                        "\n",
                        "server {\n",
                          "listen       80;\n",
                          "\n",
                          "location / {\n",
                            "proxy_pass http://",{ "Fn::GetAtt" : ["LoadBalancer","DNSName"] },":80/;\n",
                            "}\n",
                            "\n",
                            "error_page   500 502 503 504  /50x.html;\n",
                            "location = /50x.html {\n",
                              "root   html;\n",
                              "}\n",
                              "}\n",
                              "}\n"
                            ]
                          ]
                        },
                        "mode"  : "000644",
                        "owner": "root",
                        "group": "root"
                      }},
              "services" : {
                "sysvinit" : {
                  "nginx"   : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/nginx/nginx.conf"] }
              }
            }
          }}
        },
        "Properties": {
          "ImageId" : "ami-1e299d7e",
            "InstanceType"   : { "Ref" : "InstanceType" },
            "SubnetId" : { "Ref" : "PublicSubnet1" },
            "SecurityGroupIds" : [{ "Ref" : "WebServerSecurityGroup" }],
            "KeyName"        : { "Ref" : "KeyName" },
            "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash -xe\n",
              "yum install -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerInstance ",
             "         --configsets Install ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",
             "sudo service nginx restart \n"
             ]]}}
           }
         }
   },
   "Outputs":{
      "VPCId":{
         "Description":"VPCId of the newly created VPC",
         "Value":          {
            "Ref":"VPC"
         }
      },
      "PublicSubnet1Id":{
         "Description":"SubnetId of the public subnet",
         "Value":          {
            "Ref":"PublicSubnet1"
         }
      },
      "PublicSubnet2Id":{
         "Description":"SubnetId of the public subnet",
         "Value":          {
            "Ref":"PublicSubnet2"
         }
      },
      "PrivateSubnet1Id":{
         "Description":"SubnetId of the public subnet",
         "Value":          {
            "Ref":"PrivateSubnet1"
         }
      },
      "PrivateSubnet2Id":{
         "Description":"SubnetId of the public subnet",
         "Value":          {
            "Ref":"PrivateSubnet2"
         }
      }
   }
}
